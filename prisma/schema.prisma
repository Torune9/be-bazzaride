generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]
}

model Profile {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  image       String?
  userId      String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String?
  roleId    Int? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  role     Role?        @relation(fields: [roleId], references: [id], onDelete: SetNull)
  profile  Profile?
  address  UserAddress[]
  events   Event[]
  store    Store?
}

model UserAddress {
  id        String   @id @default(uuid())
  userId    String
  city      String
  district  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event[]
}

model Store {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  image       String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(uuid())
  userId      String
  categoryId  String?
  name        String
  description String?
  quota       Int
  address     String
  poster      String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
